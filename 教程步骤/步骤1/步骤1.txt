https://doc.webpack-china.org/guides/get-started/
webpack官方中文文档

此步骤为
慕课网 webpack深入与实战 1-2章节 http://www.imooc.com/learn/802

创建文件夹 webpack-test ，cd 到 webpack-test
npm init
创建项目，让输入东西，全打回车

输入
npm install webpack --save-dev
意思为，在package.json中安装 webpack
注意：
官方说不建议进行全局安装(npm install --global webpack)
全局安装会锁定 webpack 到指定版本，并且在使用不同的 webpack 版本的项目中可能会导致构建失败。

创建 hello.js 文件，内容为
function hello(str){
  alert(str);
}

在cmd下输入
.\node_modules\.bin\webpack hello.js hello.bundle.js
意思为，打包 hello.js 文件，打包后文件名为 hello.bundle.js
注意：这里多加了 .\node_modules\.bin\ ，才能访问它的 bin 版本。
如图1

看 hello.bundle.js
里面有 注释的 /* 0 */ 代表模块0

新建world.js
写入
function world(){
  return{

  };
}

在hello.js中写入
require('./world.js');

function hello(str){
  alert(str);
}

在cmd中执行
.\node_modules\.bin\webpack hello.js hello.bundle.js
如图2
图上写着
./world.js 模块编号是[0]
./hello.js 模块编号是[1]

看 hello.bundle.js
world.js代码上写着
/* 0 */
代表这是模块0

hello.js代码上写着
/* 1 */
代表这是模块1

看到
function hello(str){
上有代码
__webpack_require__(0);
用这种方式去寻找它的依赖，依赖是模块 0，也就是world.js代码
也就是 hello.js 里的代码
require('./world.js');

新建 style.css 文件
写入
html,body{
  padding:0;
  margin:0;
}

在hello.js写入代码
require('./style.css');

为了让 webpack 处理 css 文件，需要加 loader，进行 css 文件支持
在cmd输入
npm install css-loader style-loader --save-dev
安装插件

将hello.js代码的
require('./style.css');
改为
require('css-loader!./style.css');
其中 css-loader 代表让 webpack打包支持 css 文件类型
!为分隔符

在cmd输入
.\node_modules\.bin\webpack hello.js hello.bundle.js
如图3

打开 hello.bundle.js
代码里有
// module
exports.push([module.i, "html,body{\r\n  padding:0;\r\n  margin:0;\r\n}\r\n", ""]);
说明 style.css里的代码已经打包进来了，并在其他地方多了些自定义的函数(不重要)

新建文件 index.html
生成代码 html:5 -> tab键
里面写入
<script src='hello.bundle.js'></script>

在 hello.js 加入
hello('hello world!');

在cmd输入
.\node_modules\.bin\webpack hello.js hello.bundle.js
如图4

在浏览器打开 index.html
会弹出 alert ， hello world!

在style.css文件写入
body{
  background-color:red;
}

如果要让 css 文件的效果显示出来
需要在 hello.js 代码进行修改，将
require('css-loader!./style.css');
改为
require('style-loader!css-loader!./style.css');
其中
style-loader，代表让 css 代码可以识别
css-loader，代表让 webpack打包支持 css 文件类型

在cmd输入
.\node_modules\.bin\webpack hello.js hello.bundle.js
如图5

打开浏览器 index.html
会发现 style.css 的样式生效了，因为
hello.js 里面的
require('style-loader!css-loader!./style.css');
其中
style-loader，代表让 css 代码可以识别
css-loader，代表让 webpack打包支持 css 文件类型

浏览器里的 index.html 将 style.css 的样式，写成了 index.html 的内部样式

在 cmd 中输入 .\node_modules\.bin\webpack --help
可以查看 webpack 的所有指令

如果将 hello.js 中的
require('style-loader!css-loader!./style.css');
改为
require('./style.css');
这样就失去了打包 css 和编译 css 文件的能力
那么在 cmd 中需要输入
.\node_modules\.bin\webpack hello.js hello.bundle.js --module-bind "css=style-loader!css-loader"
进行打包
才能得到 css 和编译 css 文件

让代码自动更新
在 cmd 中输入
.\node_modules\.bin\webpack hello.js hello.bundle.js --module-bind "css=style-loader!css-loader" --watch
注意最后面的 --watch
这样代码就变成自动更新了，不需要每次在 cmd 中输入一串代码才能更新页面了，单是需要浏览器点击刷新

如果将 hello.js 中的
require('./style.css');
改回
require('style-loader!css-loader!./style.css');

在 cmd 中输入
.\node_modules\.bin\webpack hello.js hello.bundle.js --display-modules
注意最后面的 --display-modules
可以查看每个打包文件需要的 支持
如图6
可以看到 css 文件需要
style-loader和css-loader支持

在 cmd 中输入
.\node_modules\.bin\webpack hello.js hello.bundle.js --display-modules --display-reasons
如图7
注意最后的 --display-reasons 表示，为什么需要打包这个文件的原因

在 cmd 中输入
.\node_modules\.bin\webpack hello.js hello.bundle.js --display-modules --display-reasons --progress
如图8
注意最后的 --progress 表示，显示打包进度

在 cmd 中输入
.\node_modules\.bin\webpack hello.js hello.bundle.js --display-modules --display-reasons --progress --watch
如图9
注意最后的 --watch 表示，自动刷新代码，可是需要手动在浏览器上点刷新键
